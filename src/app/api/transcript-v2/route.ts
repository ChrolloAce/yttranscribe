import { NextResponse } from "next/server"; import TranscriptAPI from "youtube-transcript-api";
export async function POST(request: Request) { try { const body = await request.json(); const { videoUrl } = body; if (!videoUrl) { return NextResponse.json({ error: "YouTube URL is required" }, { status: 400 }); } let videoId = ""; try { const url = new URL(videoUrl); if (url.hostname === "youtu.be") { videoId = url.pathname.substring(1); } else if (url.hostname.includes("youtube.com")) { videoId = url.searchParams.get("v") || ""; } } catch { if (/^[a-zA-Z0-9_-]{11}$/.test(videoUrl)) { videoId = videoUrl; } } if (!videoId) { return NextResponse.json({ error: "Could not extract YouTube video ID from the provided URL" }, { status: 400 }); } console.log("Fetching transcript for video ID (v2):", videoId); try { const transcript = await TranscriptAPI.getTranscript(videoId); if (!transcript || transcript.length === 0) { return NextResponse.json({ error: "No transcript found for this video" }, { status: 404 }); } const formattedTranscript = transcript.map((item) => item.text).join(" "); return NextResponse.json({ transcript: formattedTranscript }); } catch (error) { console.error("Error fetching transcript:", error); return NextResponse.json({ error: "Failed to fetch transcript", details: String(error) }, { status: 500 }); } } catch (error) { console.error("General error in transcript API v2:", error); return NextResponse.json({ error: "Failed to process request", details: String(error) }, { status: 500 }); } }
